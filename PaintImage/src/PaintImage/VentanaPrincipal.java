/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package PaintImage;

import java.awt.Graphics2D;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import sm.image.KernelProducer;
/**
 *
 * @author ivan
 */
        
        /**
         * Tenemos que convolucionar la imagen origen en los dos gradientes, 
         * gradiente x e y.Vienen en las tranparencias las matrices por las que
         * hay que convolucionar.
         * con esas dos imagenes recorremos sus pixeles y calculamos la magnitud de las dos,
         * es decir, por ejemplo para la de x hacemos la suma de sx=gxr+gxv+gxb
         * hacemos lo mismo para la de y,
         * y calculamos la raiz cuadrada de la suma de los cuadrados de sx y sy.
         * 
         * 
         * Para la operaci√≥n binaria
         * @author ivan
         */
public class VentanaPrincipal extends javax.swing.JFrame {
    
    /**
     * Creates new form VentanaPrincipal
     */
    BufferedImage srcImg;
    private BufferedImage imgSource;
    public VentanaPrincipal() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
 
    @SuppressWarnings("unchecked")
    BufferedImage convertImageType(BufferedImage img, int type){ 
        if(img==null) return null; 
        BufferedImage imgOut = new BufferedImage(img.getWidth(), 
        img.getHeight(), type); 
        Graphics2D g2d = imgOut.createGraphics(); 
        g2d.drawImage(img,0,0,null); 
        
        return imgOut; 
    } 
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        herramientasGrupo = new javax.swing.ButtonGroup();
        jMenuItem1 = new javax.swing.JMenuItem();
        barraColor = new javax.swing.JPanel();
        barraEstado = new javax.swing.JLabel();
        panelColor = new javax.swing.JPanel();
        rojoButton = new javax.swing.JButton();
        azulButton = new javax.swing.JButton();
        verdeButton = new javax.swing.JButton();
        negroButton = new javax.swing.JButton();
        blancoButton = new javax.swing.JButton();
        amarilloButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        grosorSpin = new javax.swing.JSpinner();
        brilloPanel = new javax.swing.JPanel();
        brilloSlider = new javax.swing.JSlider();
        filtroPanel = new javax.swing.JPanel();
        filtroBoxPanel = new javax.swing.JPanel();
        convolveBox = new javax.swing.JComboBox();
        contrastePanel = new javax.swing.JPanel();
        contrasteButton = new javax.swing.JButton();
        iluminacionButton = new javax.swing.JButton();
        oscuridadButton = new javax.swing.JButton();
        rotacionPanel = new javax.swing.JPanel();
        rotacionSlider = new javax.swing.JSlider();
        novButton = new javax.swing.JButton();
        cientButton = new javax.swing.JButton();
        doscientButton = new javax.swing.JButton();
        escaladoPanel = new javax.swing.JPanel();
        aumentarButton = new javax.swing.JButton();
        disminuirButton = new javax.swing.JButton();
        rellenoeditarPanel = new javax.swing.JPanel();
        rellenoButton = new javax.swing.JCheckBox();
        editarButton = new javax.swing.JCheckBox();
        jToolBar1 = new javax.swing.JToolBar();
        lapizButton = new javax.swing.JToggleButton();
        lineaButton = new javax.swing.JToggleButton();
        rectanguloButton = new javax.swing.JToggleButton();
        ovaloButton = new javax.swing.JToggleButton();
        desktop = new javax.swing.JDesktopPane();
        barraMenu = new javax.swing.JMenuBar();
        archivoMenu = new javax.swing.JMenu();
        nuevoMenu = new javax.swing.JMenuItem();
        abrirMenu = new javax.swing.JMenuItem();
        abrirAudioMenu = new javax.swing.JMenuItem();
        abrirJMFMenu = new javax.swing.JMenuItem();
        guardarMenu = new javax.swing.JMenuItem();
        grabarAudioMenu = new javax.swing.JMenuItem();
        CamaraMenu = new javax.swing.JMenuItem();
        edicionMenu = new javax.swing.JMenu();
        verMenu = new javax.swing.JCheckBoxMenuItem();
        ImagenMenu = new javax.swing.JMenu();
        RescaleOPMenu = new javax.swing.JMenuItem();
        ConvolveOPMenu = new javax.swing.JMenuItem();
        LookupOPMenu = new javax.swing.JMenuItem();
        AffineTransformOpMenu = new javax.swing.JMenuItem();
        BandCombineOpMenu = new javax.swing.JMenuItem();
        ColorConvertOpMenu = new javax.swing.JMenuItem();
        UmbralizacionOPMenu = new javax.swing.JMenuItem();
        SobelOP = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        barraColor.setLayout(new java.awt.BorderLayout());

        barraEstado.setText("Punto");
        barraEstado.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        barraColor.add(barraEstado, java.awt.BorderLayout.PAGE_END);

        rojoButton.setBackground(java.awt.Color.red);
        rojoButton.setText(" ");
        rojoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rojoButtonMouseClicked(evt);
            }
        });

        azulButton.setBackground(java.awt.Color.blue);
        azulButton.setText(" ");
        azulButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                azulButtonMouseClicked(evt);
            }
        });

        verdeButton.setBackground(new java.awt.Color(13, 255, 0));
        verdeButton.setText(" ");
        verdeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                verdeButtonMouseClicked(evt);
            }
        });

        negroButton.setBackground(new java.awt.Color(4, 2, 2));
        negroButton.setText(" ");
        negroButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                negroButtonMouseClicked(evt);
            }
        });

        blancoButton.setText(" ");
        blancoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                blancoButtonMouseClicked(evt);
            }
        });

        amarilloButton.setBackground(new java.awt.Color(255, 244, 0));
        amarilloButton.setText(" ");
        amarilloButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                amarilloButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelColorLayout = new javax.swing.GroupLayout(panelColor);
        panelColor.setLayout(panelColorLayout);
        panelColorLayout.setHorizontalGroup(
            panelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelColorLayout.createSequentialGroup()
                .addGroup(panelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelColorLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(rojoButton)
                        .addGap(5, 5, 5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelColorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(negroButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(panelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelColorLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(azulButton)
                        .addGap(5, 5, 5)
                        .addComponent(verdeButton))
                    .addGroup(panelColorLayout.createSequentialGroup()
                        .addComponent(blancoButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(amarilloButton)))
                .addGap(0, 0, 0))
        );
        panelColorLayout.setVerticalGroup(
            panelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelColorLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(panelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rojoButton)
                    .addComponent(azulButton)
                    .addComponent(verdeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(negroButton)
                    .addComponent(blancoButton)
                    .addComponent(amarilloButton)))
        );

        barraColor.add(panelColor, java.awt.BorderLayout.WEST);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Grosor"));
        jPanel3.setMinimumSize(new java.awt.Dimension(60, 49));
        jPanel3.setPreferredSize(new java.awt.Dimension(90, 56));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        grosorSpin.setToolTipText("");
        grosorSpin.setName(""); // NOI18N
        grosorSpin.setPreferredSize(new java.awt.Dimension(42, 30));
        grosorSpin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                grosorSpinStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        jPanel3.add(grosorSpin, gridBagConstraints);

        jPanel1.add(jPanel3);

        brilloPanel.setLayout(new java.awt.BorderLayout());

        brilloSlider.setMinorTickSpacing(25);
        brilloSlider.setPaintTicks(true);
        brilloSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Brillo"));
        brilloSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brilloSliderStateChanged(evt);
            }
        });
        brilloSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                brilloSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                brilloSliderFocusLost(evt);
            }
        });
        brilloPanel.add(brilloSlider, java.awt.BorderLayout.CENTER);

        jPanel1.add(brilloPanel);

        filtroPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtros"));
        filtroPanel.setLayout(new java.awt.BorderLayout());

        filtroBoxPanel.setLayout(new java.awt.GridBagLayout());

        convolveBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplaciano" }));
        convolveBox.setAlignmentX(100.0F);
        convolveBox.setAlignmentY(100.0F);
        convolveBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                convolveBoxItemStateChanged(evt);
            }
        });
        convolveBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convolveBoxActionPerformed(evt);
            }
        });
        filtroBoxPanel.add(convolveBox, new java.awt.GridBagConstraints());
        convolveBox.getAccessibleContext().setAccessibleDescription("");

        filtroPanel.add(filtroBoxPanel, java.awt.BorderLayout.CENTER);

        jPanel1.add(filtroPanel);

        contrastePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Contraste"));
        contrastePanel.setLayout(new java.awt.GridBagLayout());

        contrasteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/contraste.png"))); // NOI18N
        contrasteButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/aumentar.png"))); // NOI18N
        contrasteButton.setMargin(new java.awt.Insets(0, 10, 0, 10));
        contrasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrasteButtonActionPerformed(evt);
            }
        });
        contrastePanel.add(contrasteButton, new java.awt.GridBagConstraints());

        iluminacionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/iluminar.png"))); // NOI18N
        iluminacionButton.setMargin(new java.awt.Insets(0, 10, 0, 10));
        iluminacionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iluminacionButtonActionPerformed(evt);
            }
        });
        contrastePanel.add(iluminacionButton, new java.awt.GridBagConstraints());

        oscuridadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/oscurecer.png"))); // NOI18N
        oscuridadButton.setMargin(new java.awt.Insets(0, 10, 0, 10));
        oscuridadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oscuridadButtonActionPerformed(evt);
            }
        });
        contrastePanel.add(oscuridadButton, new java.awt.GridBagConstraints());

        jPanel1.add(contrastePanel);

        rotacionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotaci√≥n"));
        rotacionPanel.setLayout(new javax.swing.BoxLayout(rotacionPanel, javax.swing.BoxLayout.LINE_AXIS));

        rotacionSlider.setMajorTickSpacing(90);
        rotacionSlider.setMaximum(360);
        rotacionSlider.setPaintTicks(true);
        rotacionSlider.setValue(0);
        rotacionSlider.setBorder(null);
        rotacionSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        rotacionSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rotacionSliderStateChanged(evt);
            }
        });
        rotacionSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rotacionSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                rotacionSliderFocusLost(evt);
            }
        });
        rotacionPanel.add(rotacionSlider);

        novButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/rotacion90.png"))); // NOI18N
        novButton.setMargin(new java.awt.Insets(0, 10, 0, 10));
        novButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novButtonActionPerformed(evt);
            }
        });
        rotacionPanel.add(novButton);

        cientButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/rotacion180.png"))); // NOI18N
        cientButton.setMargin(new java.awt.Insets(0, 10, 0, 10));
        cientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cientButtonActionPerformed(evt);
            }
        });
        rotacionPanel.add(cientButton);

        doscientButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/rotacion270.png"))); // NOI18N
        doscientButton.setAlignmentX(0.5F);
        doscientButton.setMargin(new java.awt.Insets(0, 10, 0, 10));
        doscientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doscientButtonActionPerformed(evt);
            }
        });
        rotacionPanel.add(doscientButton);

        jPanel1.add(rotacionPanel);

        escaladoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Escalar"));
        escaladoPanel.setLayout(new java.awt.GridBagLayout());

        aumentarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/aumentar.png"))); // NOI18N
        aumentarButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        aumentarButton.setMargin(new java.awt.Insets(0, 10, 0, 10));
        aumentarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aumentarButtonActionPerformed(evt);
            }
        });
        escaladoPanel.add(aumentarButton, new java.awt.GridBagConstraints());

        disminuirButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/disminuir.png"))); // NOI18N
        disminuirButton.setMargin(new java.awt.Insets(0, 10, 0, 10));
        disminuirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disminuirButtonActionPerformed(evt);
            }
        });
        escaladoPanel.add(disminuirButton, new java.awt.GridBagConstraints());

        jPanel1.add(escaladoPanel);

        rellenoeditarPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        rellenoeditarPanel.setLayout(new java.awt.BorderLayout());

        rellenoButton.setText("Relleno");
        rellenoButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        rellenoButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        rellenoButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rellenoButtonStateChanged(evt);
            }
        });
        rellenoeditarPanel.add(rellenoButton, java.awt.BorderLayout.SOUTH);

        editarButton.setText("Editar");
        editarButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                editarButtonStateChanged(evt);
            }
        });
        rellenoeditarPanel.add(editarButton, java.awt.BorderLayout.NORTH);

        jPanel1.add(rellenoeditarPanel);

        barraColor.add(jPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(barraColor, java.awt.BorderLayout.PAGE_END);

        jToolBar1.setRollover(true);

        herramientasGrupo.add(lapizButton);
        lapizButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Lapiz.gif"))); // NOI18N
        lapizButton.setFocusable(false);
        lapizButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lapizButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lapizButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lapizButtonStateChanged(evt);
            }
        });
        jToolBar1.add(lapizButton);

        herramientasGrupo.add(lineaButton);
        lineaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Linea.gif"))); // NOI18N
        lineaButton.setFocusable(false);
        lineaButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lineaButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lineaButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lineaButtonStateChanged(evt);
            }
        });
        lineaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineaButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(lineaButton);

        herramientasGrupo.add(rectanguloButton);
        rectanguloButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Rectangulo.gif"))); // NOI18N
        rectanguloButton.setFocusable(false);
        rectanguloButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectanguloButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rectanguloButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rectanguloButtonStateChanged(evt);
            }
        });
        jToolBar1.add(rectanguloButton);

        herramientasGrupo.add(ovaloButton);
        ovaloButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Ovalo.gif"))); // NOI18N
        ovaloButton.setFocusable(false);
        ovaloButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ovaloButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ovaloButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ovaloButtonStateChanged(evt);
            }
        });
        jToolBar1.add(ovaloButton);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);
        getContentPane().add(desktop, java.awt.BorderLayout.CENTER);

        archivoMenu.setText("Archivo");

        nuevoMenu.setText("Nuevo");
        nuevoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoMenuActionPerformed(evt);
            }
        });
        archivoMenu.add(nuevoMenu);

        abrirMenu.setText("Abrir");
        abrirMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirMenuActionPerformed(evt);
            }
        });
        archivoMenu.add(abrirMenu);

        abrirAudioMenu.setText("Abrir audio");
        abrirAudioMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirAudioMenuActionPerformed(evt);
            }
        });
        archivoMenu.add(abrirAudioMenu);

        abrirJMFMenu.setText("Abrir Video/Audio");
        abrirJMFMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirJMFMenuActionPerformed(evt);
            }
        });
        archivoMenu.add(abrirJMFMenu);

        guardarMenu.setText("Guardar");
        guardarMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarMenuActionPerformed(evt);
            }
        });
        archivoMenu.add(guardarMenu);

        grabarAudioMenu.setText("Grabar audio");
        grabarAudioMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grabarAudioMenuActionPerformed(evt);
            }
        });
        archivoMenu.add(grabarAudioMenu);

        CamaraMenu.setText("Camara");
        CamaraMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CamaraMenuActionPerformed(evt);
            }
        });
        archivoMenu.add(CamaraMenu);

        barraMenu.add(archivoMenu);

        edicionMenu.setText("Edici√≥n");

        verMenu.setSelected(true);
        verMenu.setText("Ver barra estado");
        verMenu.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                verMenuStateChanged(evt);
            }
        });
        verMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verMenuActionPerformed(evt);
            }
        });
        edicionMenu.add(verMenu);

        barraMenu.add(edicionMenu);

        ImagenMenu.setText("Imagen");

        RescaleOPMenu.setText("RescaleOP");
        RescaleOPMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RescaleOPMenuActionPerformed(evt);
            }
        });
        ImagenMenu.add(RescaleOPMenu);

        ConvolveOPMenu.setText("ConvolveOP");
        ConvolveOPMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConvolveOPMenuActionPerformed(evt);
            }
        });
        ImagenMenu.add(ConvolveOPMenu);

        LookupOPMenu.setText("LookupOP");
        LookupOPMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LookupOPMenuActionPerformed(evt);
            }
        });
        ImagenMenu.add(LookupOPMenu);

        AffineTransformOpMenu.setText("AffineTransformOp");
        AffineTransformOpMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AffineTransformOpMenuActionPerformed(evt);
            }
        });
        ImagenMenu.add(AffineTransformOpMenu);

        BandCombineOpMenu.setText("BandCombineOp");
        ImagenMenu.add(BandCombineOpMenu);

        ColorConvertOpMenu.setText("ColorConvertOp");
        ColorConvertOpMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorConvertOpMenuActionPerformed(evt);
            }
        });
        ImagenMenu.add(ColorConvertOpMenu);

        UmbralizacionOPMenu.setText("UmbralizacionOP");
        UmbralizacionOPMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UmbralizacionOPMenuActionPerformed(evt);
            }
        });
        ImagenMenu.add(UmbralizacionOPMenu);

        SobelOP.setText("SobelOP");
        SobelOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SobelOPActionPerformed(evt);
            }
        });
        ImagenMenu.add(SobelOP);

        barraMenu.add(ImagenMenu);

        setJMenuBar(barraMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rojoButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rojoButtonMouseClicked
        VentanaInternaImage vi =(VentanaInternaImage)desktop.getSelectedFrame();
        if(vi!=null) vi.getLienzo().setColor(((JButton)evt.getSource()).getBackground());
        this.repaint();
    }//GEN-LAST:event_rojoButtonMouseClicked

    private void lapizButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lapizButtonStateChanged
        if(this.lapizButton.isSelected()){
            this.barraEstado.setText("Punto");
                    desktop.getSelectedFrame().getContentPane();
        }
    }//GEN-LAST:event_lapizButtonStateChanged

    private void rellenoButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rellenoButtonStateChanged
        VentanaInternaImage vi = (VentanaInternaImage)desktop.getSelectedFrame();
        if(vi!=null){
            if(this.rellenoButton.isSelected())
                 vi.getLienzo().setRelleno(true);
             else
                 vi.getLienzo().setRelleno(false);
         }
        repaint();
    }//GEN-LAST:event_rellenoButtonStateChanged

    private void lineaButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lineaButtonStateChanged
        VentanaInternaImage vi = (VentanaInternaImage)desktop.getSelectedFrame();
        if(vi!=null){
            if(this.lineaButton.isSelected()){
                this.barraEstado.setText("Linea");
                 vi.getLienzo().setForma(1);
            }
        }
    }//GEN-LAST:event_lineaButtonStateChanged

    private void rectanguloButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rectanguloButtonStateChanged
        VentanaInternaImage vi = (VentanaInternaImage)desktop.getSelectedFrame();
        if(vi!=null){
            if(this.rectanguloButton.isSelected()){
                this.barraEstado.setText("Rectangulo");
                 vi.getLienzo().setForma(2);
            }
        }
    }//GEN-LAST:event_rectanguloButtonStateChanged

    private void ovaloButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ovaloButtonStateChanged
        VentanaInternaImage vi = (VentanaInternaImage)desktop.getSelectedFrame();
        if(vi!=null){
            if(this.ovaloButton.isSelected())
                this.barraEstado.setText("Circulo");
                 vi.getLienzo().setForma(3);
        }
    }//GEN-LAST:event_ovaloButtonStateChanged

    private void azulButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_azulButtonMouseClicked
        VentanaInternaImage vi = (VentanaInternaImage)desktop.getSelectedFrame();
         if(vi!=null) vi.getLienzo().setColor(((JButton)evt.getSource()).getBackground());
        this.repaint();
    }//GEN-LAST:event_azulButtonMouseClicked

    private void verdeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_verdeButtonMouseClicked
        VentanaInternaImage vi = (VentanaInternaImage)desktop.getSelectedFrame();
         if(vi!=null) vi.getLienzo().setColor(((JButton)evt.getSource()).getBackground());
        this.repaint();
    }//GEN-LAST:event_verdeButtonMouseClicked

    private void negroButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_negroButtonMouseClicked
        VentanaInternaImage vi = (VentanaInternaImage)desktop.getSelectedFrame();
         if(vi!=null) vi.getLienzo().setColor(((JButton)evt.getSource()).getBackground());
        this.repaint();
    }//GEN-LAST:event_negroButtonMouseClicked

    private void blancoButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_blancoButtonMouseClicked
        VentanaInternaImage vi = (VentanaInternaImage)desktop.getSelectedFrame();
         if(vi!=null) vi.getLienzo().setColor(((JButton)evt.getSource()).getBackground());
        this.repaint();
    }//GEN-LAST:event_blancoButtonMouseClicked

    private void amarilloButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_amarilloButtonMouseClicked
        VentanaInternaImage vi = (VentanaInternaImage)desktop.getSelectedFrame();
        if(vi!=null) vi.getLienzo().setColor(((JButton)evt.getSource()).getBackground());
        this.repaint();
    }//GEN-LAST:event_amarilloButtonMouseClicked

    private void verMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_verMenuActionPerformed

    private void verMenuStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_verMenuStateChanged
        if(this.verMenu.isSelected())
            this.barraEstado.setVisible(true);
        else
            this.barraEstado.setVisible(false);
    }//GEN-LAST:event_verMenuStateChanged

    private void abrirMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirMenuActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        

        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                VentanaInternaImage vi = new VentanaInternaImage();
                vi.getLienzo().setImage(img);
                vi.setTitle(f.getAbsolutePath());
                this.desktop.add(vi);
                vi.setVisible(true);
                vi.getLienzo().repaint();
            }
            catch(Exception ex){
                System.err.println("Error al leer la imagen");
            }
        }

    }//GEN-LAST:event_abrirMenuActionPerformed

    private void nuevoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoMenuActionPerformed
        VentanaInternaImage vi = new VentanaInternaImage();
        vi.setTitle("Imagen sin guardar");
        this.desktop.add(vi);
        vi.setVisible(true);

    }//GEN-LAST:event_nuevoMenuActionPerformed

    private void guardarMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarMenuActionPerformed
          // TODO add your handling code here:
        VentanaInternaImage vi = (VentanaInternaImage)desktop.getSelectedFrame();
        BufferedImage img = vi.getLienzo().getImage();
        //Graphics2D g2d = vi.getLienzo().getImage().createGraphics();
        Graphics2D g2d = img.createGraphics(); 
        //g2d.drawLine(10,10,200,200);
        vi.getLienzo().paint(g2d);
        JFileChooser dlg = new JFileChooser(); 
        int resp = dlg.showSaveDialog(this); 
        if( resp == JFileChooser.APPROVE_OPTION) { 
            try{ 
            File f = dlg.getSelectedFile();
            ImageIO.write(img,"jpg",f);
            vi.setTitle(f.getAbsolutePath());
            }catch(Exception ex){ 
            System.err.println("Error al leer la imagen"); 
        } 
}
    }//GEN-LAST:event_guardarMenuActionPerformed

    private void lineaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineaButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lineaButtonActionPerformed

    private void grosorSpinStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_grosorSpinStateChanged
        VentanaInternaImage vi = (VentanaInternaImage)desktop.getSelectedFrame();
        if(vi!=null) {
            this.grosorSpin.getValue();
            vi.getLienzo().setGrosor((int) this.grosorSpin.getValue());
        }
        this.repaint();
    }//GEN-LAST:event_grosorSpinStateChanged

    private void editarButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_editarButtonStateChanged
        VentanaInternaImage vi = (VentanaInternaImage)desktop.getSelectedFrame();
        if(vi!=null){
            if(this.editarButton.isSelected())
                 vi.getLienzo().setEditar(true);
             else
                 vi.getLienzo().setEditar(false);
         }
        repaint();
    }//GEN-LAST:event_editarButtonStateChanged

    private void RescaleOPMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RescaleOPMenuActionPerformed

        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource!=null){
                try{
                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
                    BufferedImage imgdest = rop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_RescaleOPMenuActionPerformed

    private void ConvolveOPMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvolveOPMenuActionPerformed
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource!=null){
                try{
                    Kernel k = new Kernel(3,3,KernelProducer.MASCARA_MEDIA_3x3); 
                    ConvolveOp cop = new ConvolveOp( k ); 
                    BufferedImage imgOut = cop.filter(imgSource,null); 
                    vi.getLienzo().setImage(imgOut);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ConvolveOPMenuActionPerformed

    private void brilloSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloSliderFocusGained
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame());
        if (vi != null) {
            this.srcImg = vi.getLienzo().getImage();
        }
    }//GEN-LAST:event_brilloSliderFocusGained

    private void brilloSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloSliderFocusLost

        srcImg =null;
    }//GEN-LAST:event_brilloSliderFocusLost

    private void brilloSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brilloSliderStateChanged
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame());
            if (vi != null) {
                
                if(this.srcImg != null){
                    try{
                        if(srcImg.getType() != BufferedImage.TYPE_INT_RGB)
                            srcImg = this.convertImageType(srcImg, BufferedImage.TYPE_INT_RGB);
                        RescaleOp rop = new RescaleOp(1.0F, brilloSlider.getValue(), null);
                        BufferedImage imgdest = rop.filter(this.srcImg, null);
                        vi.getLienzo().setImage(imgdest);
                        vi.getLienzo().repaint();
                    } catch(IllegalArgumentException e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }

    }//GEN-LAST:event_brilloSliderStateChanged

    private void convolveBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convolveBoxActionPerformed
        
    }//GEN-LAST:event_convolveBoxActionPerformed

    private void convolveBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_convolveBoxItemStateChanged
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource!=null){
                try{
                    Kernel k = null;
                    String s = (String) convolveBox.getSelectedItem();
                    switch (s) {
                        case "Media":
                            k = new Kernel(3,3,KernelProducer.MASCARA_MEDIA_3x3);
                            break;
                        case "Binomial":
                            k = new Kernel(3,3,KernelProducer.MASCARA_BINOMIAL_3x3);
                            break;
                        case "Enfoque":
                            k = new Kernel(3,3,KernelProducer.MASCARA_ENFOQUE_3x3);
                            break;
                        case "Laplaciano":
                            k = new Kernel(3,3,KernelProducer.MASCARA_LAPLACIANA_3x3);
                            break;
                        case "Relieve":
                            k = new Kernel(3,3,KernelProducer.MASCARA_RELIEVE_3x3);
                            break;
                    }

                    
                    ConvolveOp cop = new ConvolveOp(k); 
                    BufferedImage imgOut = cop.filter(imgSource,null); 
                    vi.getLienzo().setImage(imgOut);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
        
    }//GEN-LAST:event_convolveBoxItemStateChanged

    private void AffineTransformOpMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AffineTransformOpMenuActionPerformed
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame()); 
         if (vi != null) { 
            BufferedImage imgSource = vi.getLienzo().getImage(); 
         if(imgSource!=null){ 
            try{ 
                AffineTransform
                //Zoom
                 at = AffineTransform.getScaleInstance(1.25,1.25);
                //Gira 180¬∫
                //AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(180.0), 
                //        imgSource.getWidth()/2,imgSource.getHeight()/2); 
                //Estira las puntas
                //at = AffineTransform.getShearInstance(0.5,0.0); 
                        //Mueve la imagen 20px desde la esquina
                //at = AffineTransform.getTranslateInstance(20.0,20.0); 


                try{ 
                 AffineTransformOp atop = new AffineTransformOp(at, 
                AffineTransformOp.TYPE_BILINEAR); 
                 BufferedImage imgdest = atop.filter( imgSource, null); 
                 vi.getLienzo().setImage(imgdest);
                 vi.getLienzo().repaint();
                 }catch(Exception e){ 
                 System.err.println("Error al aplicar Affine"); 
                 } 

            } catch(IllegalArgumentException e){ 
                System.err.println(e.getLocalizedMessage()); 
            } 
         } 
         }
    }//GEN-LAST:event_AffineTransformOpMenuActionPerformed

    private void LookupOPMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LookupOPMenuActionPerformed
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame()); 
         if (vi != null) { 
            BufferedImage imgSource = vi.getLienzo().getImage(); 
            /*Es necesario convertir la imagen a INT_RGB para quitar el canal alfa,
            ya que, ni LookupOP, ni Rescaleop
            */
            imgSource = this.convertImageType(imgSource, BufferedImage.TYPE_INT_BGR);
            
            if(imgSource!=null){ 
               try{ 
               LookupTable lt = LookupTableProducer.negativeFuction();
               //LookupTable lt; 
               //lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);
               LookupOp lop = new LookupOp(lt, null); 
               BufferedImage imgdest = lop.filter(imgSource,null); 
               vi.getLienzo().setImage(imgdest);
               vi.getLienzo().repaint();
               }catch(Exception e){ 
               System.err.println("Error"); 
               }
            } 
         }
        
    }//GEN-LAST:event_LookupOPMenuActionPerformed

    private void ColorConvertOpMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColorConvertOpMenuActionPerformed
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame()); 
         if (vi != null) { 
            BufferedImage imgSource = vi.getLienzo().getImage(); 
         if(imgSource!=null){ 
            try{ 
                ICC_Profile ip;
                ip = ICC_Profile.getInstance(ColorSpace.CS_sRGB); 
                ColorSpace cs = new ICC_ColorSpace(ip); 
                ColorConvertOp ccop = new ColorConvertOp(cs,null); 
                BufferedImage imgdest = ccop.filter(imgSource,null); 
                vi.getLienzo().setImage(imgdest);
                vi.getLienzo().repaint();
                }catch(Exception e){ 
                System.err.println("Error"); 
            }
         } 
         }
        
        
    }//GEN-LAST:event_ColorConvertOpMenuActionPerformed

    private void contrasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrasteButtonActionPerformed
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame()); 
        if (vi != null) { 
            BufferedImage imgSource = vi.getLienzo().getImage(); 
            /*Es necesario convertir la imagen a INT_RGB para quitar el canal alfa,
            ya que, ni LookupOP, ni Rescaleop
            */
            if(imgSource!=null){ 
               try{ 
                   if(imgSource.getType() != BufferedImage.TYPE_INT_RGB)
                        imgSource = this.convertImageType(imgSource, BufferedImage.TYPE_INT_RGB);
                   
                    LookupTable lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
                    //LookupTable lt; 
                    //lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);
                    LookupOp lop = new LookupOp(lt, null); 
                    BufferedImage imgdest = lop.filter(imgSource,null); 
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                    }catch(Exception e){ 
                    System.err.println("Error"); 
               }
            } 
        }
    }//GEN-LAST:event_contrasteButtonActionPerformed

    private void doscientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doscientButtonActionPerformed
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame()); 
         if (vi != null) { 
            BufferedImage imgSource = vi.getLienzo().getImage(); 
         if(imgSource!=null){ 
                AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(270.0), 
                        imgSource.getWidth()/2,imgSource.getHeight()/2); 
                try{ 
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR); 
                    BufferedImage imgdest = atop.filter( imgSource, null); 
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(IllegalArgumentException e){ 
                System.err.println(e.getLocalizedMessage());
                } 

            }  
        }
    }//GEN-LAST:event_doscientButtonActionPerformed

    private void iluminacionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iluminacionButtonActionPerformed
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame()); 
        if (vi != null) { 
            BufferedImage imgSource = vi.getLienzo().getImage(); 
            /*Es necesario convertir la imagen a INT_RGB para quitar el canal alfa,
            ya que, ni LookupOP, ni Rescaleop
            */
            if(imgSource!=null){ 
               try{ 
                   if(imgSource.getType() != BufferedImage.TYPE_INT_RGB)
                        imgSource = this.convertImageType(imgSource, BufferedImage.TYPE_INT_RGB);
                   
                    LookupTable lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);
                    LookupOp lop = new LookupOp(lt, null); 
                    BufferedImage imgdest = lop.filter(imgSource,null); 
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                    }catch(Exception e){ 
                    System.err.println("Error"); 
               }
            } 
        }
    }//GEN-LAST:event_iluminacionButtonActionPerformed

    private void oscuridadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oscuridadButtonActionPerformed
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame()); 
        if (vi != null) { 
            BufferedImage imgSource = vi.getLienzo().getImage(); 
            /*Es necesario convertir la imagen a INT_RGB para quitar el canal alfa,
            ya que, ni LookupOP, ni Rescaleop
            */
            if(imgSource!=null){ 
               try{ 
                   if(imgSource.getType() != BufferedImage.TYPE_INT_RGB)
                        imgSource = this.convertImageType(imgSource, BufferedImage.TYPE_INT_RGB);
                   
                    LookupTable lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_GAMMA_CORRECTION);
                    LookupOp lop = new LookupOp(lt, null); 
                    BufferedImage imgdest = lop.filter(imgSource,null); 
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                    }catch(Exception e){ 
                    System.err.println("Error"); 
               }
            } 
        }
    }//GEN-LAST:event_oscuridadButtonActionPerformed

    private void novButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novButtonActionPerformed
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame()); 
         if (vi != null) { 
            BufferedImage imgSource = vi.getLienzo().getImage(); 
         if(imgSource!=null){ 
                AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(90.0), 
                        imgSource.getWidth()/2,imgSource.getHeight()/2); 
                try{ 
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR); 
                    BufferedImage imgdest = atop.filter( imgSource, null); 
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(IllegalArgumentException e){ 
                System.err.println(e.getLocalizedMessage());
                } 

            }  
        } 
    }//GEN-LAST:event_novButtonActionPerformed

    private void cientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cientButtonActionPerformed
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame()); 
         if (vi != null) { 
            BufferedImage imgSource = vi.getLienzo().getImage(); 
         if(imgSource!=null){ 
                AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(180.0), 
                        imgSource.getWidth()/2,imgSource.getHeight()/2); 
                try{ 
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR); 
                    BufferedImage imgdest = atop.filter( imgSource, null); 
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(IllegalArgumentException e){ 
                System.err.println(e.getLocalizedMessage());
                } 

            }  
        }
    }//GEN-LAST:event_cientButtonActionPerformed

    private void rotacionSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotacionSliderFocusGained
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame());
        if (vi != null) {
            this.srcImg = vi.getLienzo().getImage();
        }
    }//GEN-LAST:event_rotacionSliderFocusGained

    private void rotacionSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rotacionSliderStateChanged
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame());
        if (vi != null) {

            if(this.srcImg != null){
                try{
                    if(srcImg.getType() != BufferedImage.TYPE_INT_RGB)
                        srcImg = this.convertImageType(srcImg, BufferedImage.TYPE_INT_RGB);
                    AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(this.rotacionSlider.getValue()), 
                    srcImg.getWidth()/2,srcImg.getHeight()/2);
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR); 
                    BufferedImage imgdest = atop.filter( srcImg, null); 
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
        
    }//GEN-LAST:event_rotacionSliderStateChanged

    private void rotacionSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotacionSliderFocusLost
        srcImg =null;

    }//GEN-LAST:event_rotacionSliderFocusLost

    private void aumentarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aumentarButtonActionPerformed
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame()); 
         if (vi != null) { 
            BufferedImage imgSource = vi.getLienzo().getImage(); 
         if(imgSource!=null){ 
            try{ 
                AffineTransform at = AffineTransform.getScaleInstance(1.25,1.25);
                
                try{ 
                 AffineTransformOp atop = new AffineTransformOp(at, 
                AffineTransformOp.TYPE_BILINEAR); 
                 BufferedImage imgdest = atop.filter( imgSource, null); 
                 vi.getLienzo().setImage(imgdest);
                 vi.getLienzo().repaint();
                 }catch(Exception e){ 
                 System.err.println("Error al aplicar Affine"); 
                 } 

            } catch(IllegalArgumentException e){ 
                System.err.println(e.getLocalizedMessage()); 
            } 
         } 
         }
    }//GEN-LAST:event_aumentarButtonActionPerformed

    private void disminuirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disminuirButtonActionPerformed
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame()); 
         if (vi != null) { 
            BufferedImage imgSource = vi.getLienzo().getImage(); 
         if(imgSource!=null){ 
            try{ 
                AffineTransform at = AffineTransform.getScaleInstance(0.75,0.75);
                
                try{ 
                 AffineTransformOp atop = new AffineTransformOp(at, 
                AffineTransformOp.TYPE_BILINEAR); 
                 BufferedImage imgdest = atop.filter( imgSource, null); 
                 vi.getLienzo().setImage(imgdest);
                 vi.getLienzo().repaint();
                 }catch(Exception e){ 
                 System.err.println("Error al aplicar Affine"); 
                 } 

            } catch(IllegalArgumentException e){ 
                System.err.println(e.getLocalizedMessage()); 
            } 
         } 
         }
    }//GEN-LAST:event_disminuirButtonActionPerformed

    private void UmbralizacionOPMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UmbralizacionOPMenuActionPerformed
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame()); 
         if (vi != null) { 
            BufferedImage imgSource = vi.getLienzo().getImage(); 
            if(imgSource!=null){ 
                try{ 
                    UmbralizacionOp umb = new UmbralizacionOp(50);
                    BufferedImage imgdest = umb.filter( imgSource, null); 
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){ 
                    System.err.println("Error al aplicar Affine"); 
                } 
            }
        }
    }//GEN-LAST:event_UmbralizacionOPMenuActionPerformed

    private void SobelOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SobelOPActionPerformed
        VentanaInternaImage vi = (VentanaInternaImage) (desktop.getSelectedFrame()); 
         if (vi != null) { 
            BufferedImage imgSource = vi.getLienzo().getImage(); 
            if(imgSource!=null){ 
                try{ 
                    UmbralizacionOp umb = new UmbralizacionOp(50);
                    BufferedImage imgdest = umb.filter( imgSource, null); 
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){ 
                    System.err.println("Error al aplicar Affine"); 
                } 
            }
        }
    }//GEN-LAST:event_SobelOPActionPerformed

    private void abrirAudioMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirAudioMenuActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        

        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                VentanaInternaPlayer vip= new VentanaInternaPlayer(f);
                this.desktop.add(vip);
                vip.setVisible(true);
                vip.setTitle(f.getAbsolutePath());
            }
            catch(Exception ex){
                System.err.println("Error al leer el audio");
            }
        }
    }//GEN-LAST:event_abrirAudioMenuActionPerformed

    private void grabarAudioMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grabarAudioMenuActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                VentanaInternaRecorder vir= new VentanaInternaRecorder(f);
                this.desktop.add(vir);
                vir.setTitle(f.getAbsolutePath());
                vir.setVisible(true);
            }
            catch(Exception ex){
                System.err.println("Error al grabar el audio");
            }
        }
    }//GEN-LAST:event_grabarAudioMenuActionPerformed

    private void abrirJMFMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirJMFMenuActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                VentanaInternaJMFPlayer viJMF = VentanaInternaJMFPlayer.getInstance(f);
                if(viJMF ==null)
                    System.err.println("devuelve null");
                this.desktop.add(viJMF);
                viJMF.setVisible(true);
                viJMF.setTitle(f.getAbsolutePath());
                viJMF.setSize(250,250);
                viJMF.play();
            }
            catch(Exception ex){
                System.err.println("Error al abrir el video"+ ex.getMessage());
            }
        }

    }//GEN-LAST:event_abrirJMFMenuActionPerformed

    private void CamaraMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CamaraMenuActionPerformed
        try{
                VentanaInternaCamara vic = VentanaInternaCamara.getInstance();
                vic.setTitle("Webcam");
                this.desktop.add(vic);
                vic.setVisible(true);
            }
            catch(Exception ex){
                System.err.println("Error al abrir el video"+ ex.getMessage());
            }
    }//GEN-LAST:event_CamaraMenuActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AffineTransformOpMenu;
    private javax.swing.JMenuItem BandCombineOpMenu;
    private javax.swing.JMenuItem CamaraMenu;
    private javax.swing.JMenuItem ColorConvertOpMenu;
    private javax.swing.JMenuItem ConvolveOPMenu;
    private javax.swing.JMenu ImagenMenu;
    private javax.swing.JMenuItem LookupOPMenu;
    private javax.swing.JMenuItem RescaleOPMenu;
    private javax.swing.JMenuItem SobelOP;
    private javax.swing.JMenuItem UmbralizacionOPMenu;
    private javax.swing.JMenuItem abrirAudioMenu;
    private javax.swing.JMenuItem abrirJMFMenu;
    private javax.swing.JMenuItem abrirMenu;
    private javax.swing.JButton amarilloButton;
    private javax.swing.JMenu archivoMenu;
    private javax.swing.JButton aumentarButton;
    private javax.swing.JButton azulButton;
    private javax.swing.JPanel barraColor;
    private javax.swing.JLabel barraEstado;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JButton blancoButton;
    private javax.swing.JPanel brilloPanel;
    private javax.swing.JSlider brilloSlider;
    private javax.swing.JButton cientButton;
    private javax.swing.JButton contrasteButton;
    private javax.swing.JPanel contrastePanel;
    private javax.swing.JComboBox convolveBox;
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JButton disminuirButton;
    private javax.swing.JButton doscientButton;
    private javax.swing.JMenu edicionMenu;
    private javax.swing.JCheckBox editarButton;
    private javax.swing.JPanel escaladoPanel;
    private javax.swing.JPanel filtroBoxPanel;
    private javax.swing.JPanel filtroPanel;
    private javax.swing.JMenuItem grabarAudioMenu;
    private javax.swing.JSpinner grosorSpin;
    private javax.swing.JMenuItem guardarMenu;
    private javax.swing.ButtonGroup herramientasGrupo;
    private javax.swing.JButton iluminacionButton;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToggleButton lapizButton;
    private javax.swing.JToggleButton lineaButton;
    private javax.swing.JButton negroButton;
    private javax.swing.JButton novButton;
    private javax.swing.JMenuItem nuevoMenu;
    private javax.swing.JButton oscuridadButton;
    private javax.swing.JToggleButton ovaloButton;
    private javax.swing.JPanel panelColor;
    private javax.swing.JToggleButton rectanguloButton;
    private javax.swing.JCheckBox rellenoButton;
    private javax.swing.JPanel rellenoeditarPanel;
    private javax.swing.JButton rojoButton;
    private javax.swing.JPanel rotacionPanel;
    private javax.swing.JSlider rotacionSlider;
    private javax.swing.JCheckBoxMenuItem verMenu;
    private javax.swing.JButton verdeButton;
    // End of variables declaration//GEN-END:variables
}
